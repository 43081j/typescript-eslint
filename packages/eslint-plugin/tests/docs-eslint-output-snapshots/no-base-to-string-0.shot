Incorrect

// Passing an object or class instance to string concatenation:
'' + {};
     ~~ '{}' will use Object's default stringification format ('[object Object]') when stringified.

class MyClass {}
const value = new MyClass();
value + '';
~~~~~ 'value' will use Object's default stringification format ('[object Object]') when stringified.

// Interpolation and manual .toString() and `toLocaleString()` calls too:
`Value: ${value}`;
          ~~~~~ 'value' will use Object's default stringification format ('[object Object]') when stringified.
String({});
       ~~ '{}' will use Object's default stringification format ('[object Object]') when stringified.
({}).toString();
 ~~ '{}' will use Object's default stringification format ('[object Object]') when stringified.
({}).toLocaleString();
 ~~ '{}' will use Object's default stringification format ('[object Object]') when stringified.

// Stringifying objects or instances in an array with the `Array.prototype.join`.
[{}, new MyClass()].join('');
~~~~~~~~~~~~~~~~~~~ Using `join()` for [{}, new MyClass()] will use Object's default stringification format ('[object Object]') when stringified.
