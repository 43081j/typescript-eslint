Incorrect

let anyObject: {};
               ~~ The `{}` ("empty object") type allows any non-nullish value, including literals like `0` and `""`.
                  - If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.
                  - If you want a type meaning "any object", you probably want `object` instead.
                  - If you want a type meaning "any value", you probably want `unknown` instead.
let anyValue: {};
              ~~ The `{}` ("empty object") type allows any non-nullish value, including literals like `0` and `""`.
                 - If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.
                 - If you want a type meaning "any object", you probably want `object` instead.
                 - If you want a type meaning "any value", you probably want `unknown` instead.

interface AnyObjectA {}
          ~~~~~~~~~~ An empty interface declaration allows any non-nullish value, including literals like `0` and `""`.
                     - If that's what you want, disable this lint rule with an inline comment or configure the 'allowInterfaces' rule option.
                     - If you want a type meaning "any object", you probably want `object` instead.
                     - If you want a type meaning "any value", you probably want `unknown` instead.
interface AnyValueA {}
          ~~~~~~~~~ An empty interface declaration allows any non-nullish value, including literals like `0` and `""`.
                    - If that's what you want, disable this lint rule with an inline comment or configure the 'allowInterfaces' rule option.
                    - If you want a type meaning "any object", you probably want `object` instead.
                    - If you want a type meaning "any value", you probably want `unknown` instead.

type AnyObjectB = {};
                  ~~ The `{}` ("empty object") type allows any non-nullish value, including literals like `0` and `""`.
                     - If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.
                     - If you want a type meaning "any object", you probably want `object` instead.
                     - If you want a type meaning "any value", you probably want `unknown` instead.
type AnyValueB = {};
                 ~~ The `{}` ("empty object") type allows any non-nullish value, including literals like `0` and `""`.
                    - If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.
                    - If you want a type meaning "any object", you probably want `object` instead.
                    - If you want a type meaning "any value", you probably want `unknown` instead.
