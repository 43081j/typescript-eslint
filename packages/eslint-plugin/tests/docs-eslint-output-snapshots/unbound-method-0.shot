Incorrect

class MyClass {
  public log(): void {
    console.log(this);
  }
}

const instance = new MyClass();

// This logs the global scope (`window`/`global`), not the class instance
const myLog = instance.log;
              ~~~~~~~~~~~~ Avoid referencing unbound methods which may cause unintentional scoping of `this`.
                           If your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.
myLog();

// This log might later be called with an incorrect scope
const { log } = instance;
        ~~~ Avoid referencing unbound methods which may cause unintentional scoping of `this`.
            If your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.

// arith.double may refer to `this` internally
const arith = {
  double(x: number): number {
    return x * 2;
  },
};
const { double } = arith;
        ~~~~~~ Avoid referencing unbound methods which may cause unintentional scoping of `this`.
               If your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.
